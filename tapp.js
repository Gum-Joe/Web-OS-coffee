// Generated by CoffeeScript 1.9.3
(function() {
  var MongoClient, ObjectId, app, assert, bcrypt, bodyParser, clicolour, connect, cookieParser, exits, express, favicon, fs, http, https, httpsserver, logFile, logger, mongoose, morgan, passport, passportconfig, passporthttp, passportlocal, path, port, routes, salt, suser, userSchema, users, wlogger;

  express = require('express');

  path = require('path');

  favicon = require('serve-favicon');

  logger = require('morgan');

  cookieParser = require('cookie-parser');

  bodyParser = require('body-parser');

  clicolour = require('cli-color');

  fs = require("fs");

  morgan = require("morgan");

  passport = require('passport');

  passportlocal = require('passport-local');

  passporthttp = require('passport-http');

  mongoose = require('mongoose');

  MongoClient = require('mongodb'.MongoClient);

  assert = require('assert');

  ObjectId = require('mongodb'.ObjectID);

  connect = require("./libs/connect.js");

  passportconfig = require("./libs/passport.js");

  wlogger = require("./libs/logger");

  routes = require('./routes/index');

  users = require('./routes/users');

  http = require('http');

  https = require('https');

  app = express;

  bcrypt = require('bcryptjs');

  salt = bcrypt.genSaltSync(10);

  logFile = fs.createWriteStream('./logs/wos.log', {
    flags: 'a'
  });

  app.set('views', path.join(__dirname, 'views'));

  app.set('view engine', 'jade');

  app.set('view engine', 'ejs');

  app.use(logger('dev'));

  app.use(bodyParser.json());

  app.use(bodyParser.urlencoded({
    extended: false
  }));

  app.use(cookieParser());

  app.use(express["static"](path.join(__dirname, 'public')));

  app.use(express["static"](path.join(__dirname, 'bower_components')));

  app.use(express["static"](path.join(__dirname, 'views')));

  app.use(logger({
    stream: logFile
  }));

  app.use(logger('stream', wlogger.logger));

  wlogger.debug("Overriding 'Express' logger");

  app.use(require("morgan")("combined", {
    "stream": wlogger.stream
  }));

  userSchema = new mongoose.Schema(function() {
    return {
      username: {
        type: String
      }
    };
  }, {
    email: String,
    pwd: String
  });

  exits = false;

  suser = mongoose.model('usersc', userSchema);

  app.use('/', routes);

  app.use('/users', users);

  app.use('passportconfig', passportconfig);

  port = process.env.PORT || 8080;

  app.listen(port, function() {
    clicolour.cyanBright("webOS ") + clicolour.yellowBright("startup ") + "Running on port " + port;
    clicolour.cyanBright("webOS ") + clicolour.yellowBright("startup ") + "The date and time is: " + Date();
    return clicolour.cyanBright("webOS ") + clicolour.yellowBright("startup ") + connect.connect("Connect");
  });

  httpsserver = https.createServer(options);

  app.use(function(req, res, next) {
    var err;
    err = new Error('Not Found');
    err.status = 404;
    return next(err);
  });

  app.post('/login', function(req, res) {
    return res.redirect('/');
  });

  if (app.get('env' === 'development')) {
    app.use(function(err, req, res, next) {
      res.status(err.status || 500);
      return res.render('error.jade', {
        message: err.message,
        error: err
      });
    });
  }

  app.use(function(err, req, res, next) {
    res.status(err.status || 500);
    return res.render('error.jade', {
      message: err.message,
      error: {}
    });
  });

}).call(this);
